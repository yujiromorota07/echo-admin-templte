// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"echo-admin-templte/controller/mainapi"
	"echo-admin-templte/gateways/datasource/dsmysqlimpl"
	account3 "echo-admin-templte/gateways/repository/account"
	"echo-admin-templte/gateways/repository/dsmysql"
	"echo-admin-templte/generated/account"
	"echo-admin-templte/generated/login"
	"echo-admin-templte/usecase/inputport"
	account2 "echo-admin-templte/usecase/interactor/account"
	login2 "echo-admin-templte/usecase/interactor/login"
	"echo-admin-templte/usecase/repository"
)

// Injectors from wire.go:

func IntializeLoginController() login.ServerInterface {
	inputportLogin := IntializeLoginUsecase()
	serverInterface := mainapi.NewLoginController(inputportLogin)
	return serverInterface
}

func IntializeAccountController() account.ServerInterface {
	inputportAccount := IntializeAccountUsecase()
	serverInterface := mainapi.NewAccountController(inputportAccount)
	return serverInterface
}

func IntializeLoginUsecase() inputport.Login {
	accountRepository := IntializeAccountRepository()
	inputportLogin := login2.NewLoginUsecase(accountRepository)
	return inputportLogin
}

func IntializeAccountUsecase() inputport.Account {
	accountRepository := IntializeAccountRepository()
	inputportAccount := account2.NewAccountUsecase(accountRepository)
	return inputportAccount
}

func IntializeAccountRepository() repository.AccountRepository {
	accountDatasource := IntializeAccountDatasource()
	accountRoleDatasource := IntializeAccountRoleDatasource()
	accountRepository := account3.NewAccountRepository(accountDatasource, accountRoleDatasource)
	return accountRepository
}

func IntializeAccountDatasource() dsmysql.AccountDatasource {
	accountDatasource := dsmysqlimpl.NewAccountDatasource()
	return accountDatasource
}

func IntializeAccountRoleDatasource() dsmysql.AccountRoleDatasource {
	accountRoleDatasource := dsmysqlimpl.NewAccountRoleDatasource()
	return accountRoleDatasource
}
